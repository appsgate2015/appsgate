/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appsgate.lig.eude.interpreter.langage.components;

import appsgate.lig.eude.interpreter.langage.nodes.NodeException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.LoggerFactory;

/**
 *
 * @author jr
 */
public class Variable {
    // Logger
    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(Variable.class.getName());

    private final String id;
    private final String type;
    private final JSONObject json;

    /**
     * Constructor
     * 
     * @param i the id
     * @param t the type
     */
    public Variable(String i, String t) {
        this.id = i;
        this.type = t;
        this.json = null;
    }
    
    /**
     *
     * @param obj
     * @throws appsgate.lig.eude.interpreter.langage.nodes.NodeException
     */
    public Variable(JSONObject obj) throws NodeException {
        try {
            this.id = obj.getString("id");
            this.type = obj.getString("type");
            this.json = obj;
        } catch (JSONException ex) {
            throw new NodeException("Variable", "The variable cannot be init correctly, missing parameter", ex);
        }
    }

    /**
     * Return the text which is used to build a text program from a program tree
     * @return 
     */
    public String getExpertProgramDecl() {
        return "{ type: " + this.type + ", id: " + this.id + "}";
    }

    /**
     * two variables are equals if they have the same id and type
     * @param other
     * @return true if both variables are the same
     */
    public boolean equals(Variable other) {
        return other.id.equals(this.id) && other.type.equals(this.type);
    }

    /**
     * Return the list of events of a variable
     * 
     * By default a variable can not throw any events
     * 
     * @return the events that can be generated by this variable
     */
    public Set<String> getEventList() {
        return null;
    }
    
    /**
     * Return the list of actions of a variable
     * 
     * By default a variable can not do any action
     * 
     * @return the actions that can be generated by this variable
     */
    public Set<String> getActionList() {
        return null;
    }
    
    /**
     * Return the list of states a variable can have
     * 
     * By default a variable has no states
     * 
     * @return the events that can be generated by this variable
     */
    public Set<String> getStateList() {
        return null;
    }
    
    /**
     * Return the list of types that has a variable
     * 
     * By default a variable is of type variable
     * 
     * @return the types contained by this variable
     */
    public String getType() {
        return this.type;
    }
    /**
     * Return the list of types that has a variable
     * 
     * By default a variable is of type variable
     * 
     * @return the types contained by this variable
     */
    public String getName() {
        return this.id;
    }

    public List<Variable> getElements() {
        try {
            ArrayList<Variable> a = new ArrayList<Variable>();
            JSONArray list = this.json.getJSONArray("list");
            for(int i = 0; i < list.length(); i++) {
                a.add(new Variable(list.getJSONObject(i)));
            }
            return a;
            
        } catch (JSONException ex) {
            LOGGER.error("list without a list");
            return null;
        } catch (NodeException ex) {
            LOGGER.error("The variable was not well formed");
            return null;
        }
    }

}
