{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14600\viewh14340\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Les plugins Tasker se basent sur l'API Locale (http://www.twofortyfouram.com/developer.html).\
\
Le plugin d\'e9velopp\'e9 est bas\'e9 sur l'exemple des "Event Plugins" de Tasker (http://tasker.dinglisch.net/plugins-intro.html).\
Il existe trois types de plugins pour Tasker :\
- Action Plugin : Permet de faire une action.\
- Condition Plugin : Permet de tester l'\'e9tat d'une condition.\
- Event Plugin : Permet de r\'e9agir \'e0 un \'e9v\'e9nement.\
\
Le but du plugin est de permettre \'e0 Tasker de r\'e9agir \'e0 des requ\'eates HTTP, c'est pourquoi il est de type Event Plugin.\
Pour cela, il va mettre en oeuvre deux solutions :\
1) La r\'e9ception des messages sur un serveur HTTP, que le plugin va cr\'e9er tout seul.\
2) La r\'e9ception de message via Websocket entre le plugin et un serveur distant.\
Via l'interface de Tasker on pourra ainsi cr\'e9er des \'e9v\'e9nement au sens Tasker, et ajouter des param\'e8tres \'e0 ceux ci pour pouvoir filtrer les \'e9v\'e9nements. \
\
La premi\'e8re solution est relativement simple. Le plugin va cr\'e9er un serveur HTTP (NanoHTTPD) et lors de la r\'e9ception d'une requ\'eate va relancer le m\'e9canisme d'\'e9vent de Tasker.\
Cependant cette solution ne marche que sur un r\'e9seau local, le serveur s'initialisant en fonction de celui-ci.\
\
C'est pourquoi la deuxi\'e8me solution a \'e9t\'e9 mise en place. Celle-ci consiste en la cr\'e9ation d'une websocket entre le plugin et un serveur distant. De cette mani\'e8re, peu importe le r\'e9seau dans lequel on se trouve, la connexion peut \'eatre assur\'e9e.\
{\field{\*\fldinst{HYPERLINK "https://thacthab.herokuapp.com/TNES.html"}}{\fldrslt https://thacthab.herokuapp.com/TNES.html}}\
\
Architecture :\
\
Les classes Constants, PluginApplication ne sont pas modifi\'e9 de l'exemple, elles permettent de g\'e9rer certains param\'e8tres comme les versions d'SDK etc.\
La classe TaskerPlugin regroupe toutes les classes li\'e9es \'e0 Tasker et ses plugins.\
\
Dans le dossier ui, sont regroup\'e9es les classes pour la gestion d'interface. La classe EditActivity est ainsi la classe qui permet de g\'e9rer toute l'interface affich\'e9e lors de la configuration du plugin dans Tasker.\
\
Dans le dossier bundle, sont regroup\'e9es les classes pour la gestion des bundles, les \'e9l\'e9ments transf\'e9r\'e9s entre les diff\'e9rentes parties du code.\
\
Enfin, le dossier receiver contient les classes principales du plugin.\
Le dossier com contient les classes qui g\'e8rent la communication vers le plugin. On y trouve :\
- NanoHTTPD : Le serveur HTTP utilis\'e9 par le plugin. \
- HTTPHandler : La classe qui s'occupe de la gestion du serveur HTTP. C'est cette classe qui configure le serveur et s'occupe de son cycle de vie. La classe va renvoyer la requ\'eate et ses param\'e8tres re\'e7u au reste du plugin.\
- SocketIOHandler : La classe qui s'occupe de la gestion de la websocket. Au m\'eame titre que HTTPHandler, elle s'occuper de la configuration de la socket, la mise \'e0 jour de son \'e9tat etc. Un heartbeat est mis en place pour ne pas perdre la connexion avec la socket.\
\
Les deux autres classes importantes sont : \
- BackgroundService : Cette classe va \'eatre la classe tournant en t\'e2che de fond et dont le r\'f4le est la mise en place des deux solutions d\'e9crites pr\'e9c\'e9demment. Ainsi, elle va s'assurer de la cr\'e9ation des deux objets responsable du serveur HTTP et de la websocket.\
- QueryReceiver : La classe qui fait le lien avec Tasker. C'est cette classe qui va re\'e7evoir le r\'e9sultat des requ\'eates et qui va dire si l'\'e9v\'e9nement doit \'eatre pris en compte par Tasker ou non (en fonction des filtres qu'on aura mis ou non).\
\
Fonctionnement :\
\
1) Cr\'e9ation d'un Event avec ses diff\'e9rentes informations et filtres. Toutes les informations sont mises dans une Bundle\
\
2) Lorsque Tasker voit qu'une instance de l'Event est pr\'e9sente dans ses divers T\'e2ches, il cr\'e9e une instance de BackgroundService en t\'e2che de fond.\
\
3) BackgroundServce cr\'e9e le serveur HTTP s'il peut et se connecte au serveur distant avec les informations donn\'e9es lors de la cr\'e9ation de l'\'e9vent.\
\
4) Lorsque que le serveur HTTP ou la websocket re\'e7oit un message (ou requ\'eate HTTP pour le serveur HTTP), il va envoyer un message \'e0 Tasker via un Intent (INTENT_REQUEST_REQUERY). Cet Intent contiendra un id et toutes les donn\'e9es n\'e9cessaires pour la v\'e9rification des filtres.\
\
5) Tasker va cr\'e9e une instance QueryReceiver encore une fois via un Intent (ACTION_QUERY_CONDITION).\
\
6) L'instance QueryReceiver va v\'e9rifier les filtres de l'Event et les param\'e8tres re\'e7ues dans le message pour valider ou non l'Event. Si l'Event est satisfait alors le code retourner \'e0 Tasker sera que la condition est satisfaite (RESULT_CONDITION_SATISFIED). La t\'e2che suivant l'Event sera donc effectu\'e9}